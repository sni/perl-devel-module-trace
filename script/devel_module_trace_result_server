#!/usr/bin/env perl

=head1 NAME

devel_module_trace_result_server - webserver daemon to present result in html

=head1 DESCRIPTION

This script runs a webserver to present the result as web page.

=head1 SYNOPSIS

=over 4

  devel_module_trace_result_server <result file>

=back

=cut

use warnings;
use strict;

my $file   = $ARGV[0] or die("usage: $0 <result file>");
my $mode   = $ARGV[1] || 'daemon';
my $server = Devel::Module::Trace::ResultServer->_start($file, $mode);
exit;

################################################################################
package Devel::Module::Trace::ResultServer;

use warnings;
use strict;
use POSIX;
use Template;
use Mojolicious::Lite;
use JSON::XS;
use Data::Dumper;

################################################################################
sub _start {
    my($self, $file, $mode) = @_;
    get '/' => sub {
      my $c   = shift;
      $c->render(text => _get_output());
    };
    app->start($mode);
    exit;
}

################################################################################
# read result file
sub _get_output {
    my($data) = _read_results($file);
    my $stash = {
        'sprintf'     => sub { return(sprintf(@_)) },
        'int'         => \&CORE::int,
        'strftime'    => sub { return(POSIX::strftime($_[0], localtime($_[1]))) },
        'json_encode' => sub { return(JSON::XS->new->encode($_[0])) },
        'script'      => $data->{'script'},
        'filter'      => $data->{'filter'},
    };

    # clean parents from our result
    my($results, $end_time) = _clean_results($data->{'result'});
    $stash->{'timeline'} = $results;
    # calculate percentages
    my $start_time = $results->[0]->{'time'};
    my $total_time = $end_time - $start_time;
    $stash->{'start_time'} = $start_time;
    $stash->{'end_time'}   = $end_time;
    $stash->{'total_time'} = $total_time;

    # create uniq modules list
    my $uniq = {};
    for my $mod (@{$results}) {
        $mod->{'offset_x'} = ($mod->{'time'} - $start_time) / $total_time;
        $mod->{'width'}    = $mod->{'elapsed'} / $total_time;
        if(!defined $uniq->{$mod->{'name'}}) {
            $uniq->{$mod->{'name'}} = {
                name     => $mod->{'name'},
                count    => 0,
                first    => $mod->{'caller'},
                others   => [],
                duration => 0,
                childs   => $mod->{'childs'},
            }
        }
        $uniq->{$mod->{'name'}}->{'count'}++;
        $uniq->{$mod->{'name'}}->{'duration'} += $mod->{'elapsed'};
    }
    $stash->{'modules'} = $uniq;

    # get most used modules
    $stash->{'most_used'} = [sort { $uniq->{$b}->{count} <=> $uniq->{$a}->{count} || $uniq->{$a}->{name} cmp $uniq->{$b}->{name} } keys %{$uniq}];

    # get slowest used modules
    $stash->{'slowest'} = [sort { $uniq->{$b}->{duration} <=> $uniq->{$a}->{duration} || $uniq->{$a}->{name} cmp $uniq->{$b}->{name} } keys %{$uniq}];

    my $template = _get_template();
    my $output;
    my $author = -f '.author' ? 1 : 0;
    my $tt = Template->new({
                  PRE_CHOMP          => 1,
                  POST_CHOMP         => 1,
                  TRIM               => 1,
                  STRICT             => $author ? 1 : 0,
                  render_die         => 1,
    });
    $tt->process(\$template, $stash, \$output) || die $tt->error();
    return($output);
}

################################################################################
sub _clean_results {
    my($mods) = @_;
    my $flat      = [];
    my $total_end = 0;
    my $levels    = [];
    for my $mod (@{$mods}) {
        delete $mod->{'parent'};
        delete $mod->{'sub'};
        $mod->{'childs'} = 0 unless defined $mod->{'childs'};
        if(!exists $mod->{'elapsed'}) {
            print STDERR "WARNING: no elapsed time in ",Dumper($mod);
            $mod->{'elapsed'} = 0;
        }
        push @{$flat}, $mod;
        my($time, $milliseconds) = split(/\./mxo, $mod->{'time'});
        $mod->{'human_starttime'} =
            POSIX::strftime("%H:%M:", localtime($time)).
            POSIX::strftime("%S", localtime($time)).'.'.$milliseconds;
        ($time, $milliseconds) = split(/\./mxo, ($mod->{'time'}+$mod->{'elapsed'}));
        $mod->{'human_endtime'} =
            POSIX::strftime("%H:%M:", localtime($time)).
            POSIX::strftime("%S", localtime($time)).'.'.$milliseconds;
        my $end = $mod->{'time'} + $mod->{'elapsed'};
        if($end > $total_end) { $total_end = $end; }
        # count childs
        if($mod->{'level'} > 0) {
            for(my $x = $mod->{'level'}-1; $x >= 0; $x--) {
                $levels->[$x]->{'childs'}++;
            }
        }
        $levels->[$mod->{'level'}] = $mod;
    }
    return($flat, $total_end);
}

################################################################################
sub _get_template {
    our $data    = "";
    my $template = "";
    if(-e 'templates/index.tt') {
        open(my $fh, '<', 'templates/index.tt') or die("cannot read index.tt: $!");
        while(<$fh>) { $template .= $_; }
        close($fh);
    } else {
        if(!$data) {
            while(<DATA>) { $template .= $_; }
        }
        $template = $data;
    }
    return($template);
}

################################################################################
sub _read_results {
    my($file) = @_;
    open(my $fh, '<', $file) or die("cannot open $file: $!");
    my $content = "";
    while(<$fh>) { $content .= $_; }
    close($fh);
    if($content !~ m/^\$VAR1/mx) {
        die("unknown result file format");
    }
    my($VAR1);
    ## no critic
    eval($content);
    ## use critic
    die($@) if($@);
    return($VAR1);
}

################################################################################

__DATA__
